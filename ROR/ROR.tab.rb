#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "ROR.racc".
#

require 'racc/parser'


#
# (generated by racc 1.4.5)
#
require '/usr/bin/ROR.rex.rb'
require 'cgi'


class ROTR < Racc::Parser

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 4, 46, :_reduce_1,
 0, 46, :_reduce_none,
 1, 47, :_reduce_3,
 1, 48, :_reduce_none,
 0, 48, :_reduce_none,
 1, 50, :_reduce_6,
 2, 50, :_reduce_7,
 3, 49, :_reduce_8,
 2, 51, :_reduce_9,
 2, 51, :_reduce_10,
 2, 51, :_reduce_11,
 2, 51, :_reduce_12,
 0, 51, :_reduce_none,
 4, 55, :_reduce_14,
 9, 54, :_reduce_15,
 9, 54, :_reduce_16,
 8, 54, :_reduce_17,
 1, 56, :_reduce_18,
 1, 56, :_reduce_19,
 3, 53, :_reduce_20,
 3, 57, :_reduce_21,
 3, 57, :_reduce_22,
 6, 57, :_reduce_23,
 5, 57, :_reduce_24,
 6, 57, :_reduce_25,
 7, 57, :_reduce_26,
 6, 57, :_reduce_27,
 7, 57, :_reduce_28,
 8, 57, :_reduce_29,
 8, 57, :_reduce_30,
 9, 57, :_reduce_31,
 3, 57, :_reduce_32,
 0, 57, :_reduce_none,
 2, 60, :_reduce_34,
 0, 64, :_reduce_35,
 0, 65, :_reduce_36,
 8, 62, :_reduce_37,
 1, 61, :_reduce_38,
 3, 61, :_reduce_39,
 1, 63, :_reduce_40,
 1, 63, :_reduce_41,
 4, 58, :_reduce_42,
 0, 58, :_reduce_none,
 1, 66, :_reduce_44,
 4, 66, :_reduce_45,
 1, 67, :_reduce_46,
 1, 67, :_reduce_47,
 1, 67, :_reduce_48,
 1, 68, :_reduce_49,
 1, 68, :_reduce_50,
 1, 68, :_reduce_51,
 1, 68, :_reduce_52,
 1, 68, :_reduce_53,
 1, 68, :_reduce_54,
 1, 68, :_reduce_55,
 1, 59, :_reduce_none,
 1, 59, :_reduce_none,
 2, 52, :_reduce_58,
 0, 69, :_reduce_none,
 2, 69, :_reduce_60,
 2, 69, :_reduce_61 ]

racc_reduce_n = 62

racc_shift_n = 98

racc_action_table = [
    15,    79,    15,    53,    17,    15,    17,    35,    51,    17,
    21,    14,    21,    14,    15,    21,    14,    15,    17,    15,
    56,    17,    73,    17,    21,    14,    50,    21,    14,    21,
    14,    36,    15,    13,    55,    13,    17,    74,    13,    90,
    91,    44,    21,    14,    15,    45,    47,    13,    17,    15,
    13,    59,    13,    17,    21,    14,    27,    15,    29,    21,
    14,    17,    15,    37,    60,    13,    17,    21,    14,    27,
    42,    29,    21,    14,    38,    39,    40,    13,    27,    41,
    29,    61,    13,    75,    76,    77,    27,    27,    29,    29,
    13,    88,    89,    62,    63,    13,    64,    65,    43,    67,
    69,    30,    25,    72,     3,     7,    78,    52,    11,    81,
    82,    83,    10,     8,    86,     7,     4,    92,    93,    94,
    95,    96,    97 ]

racc_action_check = [
    10,    71,    59,    41,    10,    22,    59,    23,    39,    22,
    10,    10,    59,    59,    79,    22,    22,    78,    79,    72,
    43,    78,    68,    72,    79,    79,    38,    78,    78,    72,
    72,    23,    20,    10,    41,    59,    20,    68,    22,    83,
    83,    28,    20,    20,    64,    28,    37,    79,    64,    65,
    78,    46,    72,    65,    64,    64,    21,    16,    21,    65,
    65,    16,    19,    24,    47,    20,    19,    16,    16,    17,
    24,    17,    19,    19,    24,    24,    24,    64,    44,    24,
    44,    49,    65,    69,    69,    69,    45,    33,    45,    33,
    16,    81,    81,    52,    54,    19,    57,    58,    25,    60,
    63,    18,    15,    66,     0,     9,    70,    40,     6,    73,
    75,    77,     5,     4,    80,     2,     1,    84,    85,    89,
    90,    94,    96 ]

racc_action_pointer = [
    97,   116,   107,   nil,   113,   103,   100,   nil,   nil,    97,
   -11,   nil,   nil,   nil,   nil,    90,    46,    57,    91,    51,
    21,    44,    -6,    -5,    51,    85,   nil,   nil,    25,   nil,
   nil,   nil,   nil,    75,   nil,   nil,   nil,    34,    14,    -4,
    95,    -9,   nil,     6,    66,    74,    34,    29,   nil,    47,
   nil,   nil,    67,   nil,    65,   nil,   nil,    79,    80,    -9,
    87,   nil,   nil,    88,    33,    38,    85,   nil,    10,    53,
    88,   -17,     8,    94,   nil,    79,   nil,    78,     6,     3,
    95,    54,   nil,     9,    98,    99,   nil,   nil,   nil,    93,
    89,   nil,   nil,   nil,   107,   nil,    95,   nil ]

racc_action_default = [
    -2,   -62,    -5,    -3,   -62,   -62,    -4,    -6,    98,    -5,
   -13,    -7,    -1,   -59,   -33,   -62,   -13,   -62,   -62,   -13,
   -13,   -62,   -13,   -58,   -62,   -62,   -12,   -19,   -62,   -18,
    -8,    -9,   -10,   -62,   -11,   -60,   -61,   -62,   -62,   -62,
   -62,   -62,   -20,   -62,   -62,   -62,   -62,   -38,   -32,   -62,
   -21,   -22,   -62,   -57,   -62,   -56,   -14,   -62,   -62,   -13,
   -62,   -34,   -43,   -62,   -13,   -13,   -62,   -39,   -62,   -24,
   -62,   -62,   -13,   -62,   -23,   -25,   -27,   -62,   -13,   -13,
   -62,   -62,   -26,   -28,   -62,   -62,   -17,   -42,   -44,   -62,
   -29,   -30,   -15,   -16,   -62,   -31,   -62,   -45 ]

racc_goto_table = [
    18,    28,    24,     1,     5,    33,    26,     2,     9,    31,
    32,    12,    34,    68,    54,    48,    49,    46,    87,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57,    58,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,
   nil,   nil,   nil,   nil,    70,    71,   nil,   nil,   nil,   nil,
   nil,   nil,    80,   nil,   nil,   nil,   nil,   nil,    84,    85 ]

racc_goto_check = [
     6,    11,    12,     1,     3,    11,     6,     2,     4,     6,
     6,     3,     6,    13,    14,    15,    16,    11,    21,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,    11,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,
   nil,   nil,   nil,   nil,     6,     6,   nil,   nil,   nil,   nil,
   nil,   nil,     6,   nil,   nil,   nil,   nil,   nil,     6,     6 ]

racc_goto_pointer = [
   nil,     3,     7,     2,     3,   nil,   -10,   nil,   nil,   nil,
   nil,   -16,   -12,   -49,   -27,   -22,   -21,   nil,   nil,   nil,
   nil,   -63,   nil,   nil,     6 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,     6,   nil,    19,    20,    22,
    16,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 "*" => 3,
 "/" => 4,
 "+" => 5,
 "-" => 6,
 :HASHBANG => 7,
 :NONLOL => 8,
 :HAI => 9,
 :KTHXBYE => 10,
 :IHASA => 11,
 :WORD => 12,
 :ITZ => 13,
 :POSINT => 14,
 :IZ => 15,
 :BIGGRTHAN => 16,
 :YARLY => 17,
 :NOWAI => 18,
 :KTHX => 19,
 :SMALLRTHAN => 20,
 :BOTHSAEM => 21,
 :MYSQL => 22,
 :MAEKDB => 23,
 :UZE => 24,
 :MAEKTABELZ => 25,
 :OP => 26,
 :CP => 27,
 :GIMMEH => 28,
 :FROM => 29,
 :EDIT => 30,
 :DEL => 31,
 :WHERE => 32,
 :GET_PARAMS => 33,
 :ADDZ => 34,
 :COMMA => 35,
 :STRING => 36,
 :NUMBR => 37,
 :YARN => 38,
 :EQ => 39,
 :GT => 40,
 :LT => 41,
 :LIEK => 42,
 :ASTERISK => 43,
 :VISIBLE => 44 }

racc_use_result_var = false

racc_nt_base = 45

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'"*"',
'"/"',
'"+"',
'"-"',
'HASHBANG',
'NONLOL',
'HAI',
'KTHXBYE',
'IHASA',
'WORD',
'ITZ',
'POSINT',
'IZ',
'BIGGRTHAN',
'YARLY',
'NOWAI',
'KTHX',
'SMALLRTHAN',
'BOTHSAEM',
'MYSQL',
'MAEKDB',
'UZE',
'MAEKTABELZ',
'OP',
'CP',
'GIMMEH',
'FROM',
'EDIT',
'DEL',
'WHERE',
'GET_PARAMS',
'ADDZ',
'COMMA',
'STRING',
'NUMBR',
'YARN',
'EQ',
'GT',
'LT',
'LIEK',
'ASTERISK',
'VISIBLE',
'$start',
'target',
'hashbang',
'nonlol',
'lolprog',
'nonlollist',
'stmts',
'visible',
'sql',
'ifstmt',
'vardec',
'intorusrvar',
'sqlstmt',
'createtableargs',
'wordorasterisk',
'insertstringorint',
'wordcommalist',
'stringorintcommalist',
'stringorintforinsert',
'@1',
'@2',
'numbrorstring',
'wordorstringornum',
'comp',
'stringlist']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'ROR.racc', 39
  def _reduce_1( val, _values)
 result = nil
  end
.,.,

 # reduce 2 omitted

module_eval <<'.,.,', 'ROR.racc', 69
  def _reduce_3( val, _values)
    # This is a hashmap relating integers to user defined variables
    @inthash = Hash.new { |h,k| h[k] = [] }

    username_and_password = File.new("/usr/bin/MySQL config.txt", "r")

    user_and_pass=[]
    iter = 0

    username_and_password.each do |line|
      user_and_pass[iter] = line
      iter = iter + 1
    end

    @mysql_username = user_and_pass[0][10..user_and_pass[0].length-2]
    @mysql_password = user_and_pass[1][10..user_and_pass[1].length-2]


    # Output valid HTML header, for the benifit of Apache2
    cgi = CGI.new("html4") 
    cgi.out {""}
  end
.,.,

 # reduce 4 omitted

 # reduce 5 omitted

module_eval <<'.,.,', 'ROR.racc', 76
  def _reduce_6( val, _values)
 puts val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 77
  def _reduce_7( val, _values)
 puts val[1]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 82
  def _reduce_8( val, _values)
 puts result = val[1]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 85
  def _reduce_9( val, _values)
 result = val[0].to_s + val[1].to_s
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 86
  def _reduce_10( val, _values)
 result = val[0].to_s + val[1].to_s
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 87
  def _reduce_11( val, _values)
 result = val[0].to_s + val[1].to_s
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 88
  def _reduce_12( val, _values)
 result = val[0].to_s + val[1].to_s
  end
.,.,

 # reduce 13 omitted

module_eval <<'.,.,', 'ROR.racc', 102
  def _reduce_14( val, _values)
  # I need to create some kind of hashmap, or something between val[1] and val[3]

  @inthash[val[1]] << val[3]
  return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 114
  def _reduce_15( val, _values)
      if val[1].to_i > val[3].to_i
        return val[5]
      else
        return val[7]
      end
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 122
  def _reduce_16( val, _values)
      if val[1] < val[3]
        return val[5]
      else
        return val[7]
      end
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 130
  def _reduce_17( val, _values)
      if val[1] == val[2]
        return val[4]
      else
        return val[6]
      end
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 131
  def _reduce_18( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 137
  def _reduce_19( val, _values)
                usrvar = @inthash[val[0]]
                return usrvar.to_s
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 142
  def _reduce_20( val, _values)
 result = val[1]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 173
  def _reduce_21( val, _values)
    # Create Database

    # MySQL Commands:
    stream = <<-end
      drop database if exists #{val[2]};
      create database #{val[2]};
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write;
      i = 0
      while temp = f.gets
        dave[i] = temp + "<br />"
        i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 180
  def _reduce_22( val, _values)
    # Use Database

    @db = val[2]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 210
  def _reduce_23( val, _values)
    # Make Table

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      create table #{val[2]} (#{val[4]}); 
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end


    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write;
      i = 0
      while temp = f.gets
        dave[i] = temp + "<br />"
        i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 263
  def _reduce_24( val, _values)
    # Select Query

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      i = 0
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets

        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<br /><br />\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 326
  def _reduce_25( val, _values)
    # Select Query

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      i = 0
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./edit.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='colNames' value='"+colNames+"' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='hidden' name='datadata' value='" + temp[temp.index("\t")..temp.length] + "' />\n<input type='submit' value='Edit' />\n</form>\n</td></tr>\n</table>\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 396
  def _reduce_26( val, _values)
    # Select Query

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      i = 0
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./edit.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='colNames' value='"+colNames+"' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='hidden' name='datadata' value='" + temp[temp.index("\t")..temp.length] + "' />\n<input type='submit' value='Edit' />\n</form>\n</td><td>\n<form action='./delete.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='submit' value='Delete' />\n</form>\n</td></tr>\n</table>\n"
        else
          dave[i] = "<h3></h3>"

        end
        i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 457
  def _reduce_27( val, _values)
    # Select Query

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      i = 0
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./delete.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='submit' value='Delete' />\n</form>\n</td></tr>\n</table>\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 529
  def _reduce_28( val, _values)
    # Select Query

    # Get the parameters from the GET query
    this_uri = ENV["REQUEST_URI"]
    require "uri"
    uri = URI.parse(this_uri)
    uri_query = uri.query
    uri_query = uri_query.sub("+"," ")
    
    # Unescape the URI
    uri_query = URI.unescape(uri_query)
        
    uri_query = uri_query.sub("="," like '%")
    uri_query = uri_query + "%'"

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} where #{uri_query} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    i = 0
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<br /><br />\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }

    if i == 0
      puts "No record found"
    end

    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 611
  def _reduce_29( val, _values)
    # Select Query

    # Get the parameters from the GET query
    this_uri = ENV["REQUEST_URI"]
    require "uri"
    uri = URI.parse(this_uri)
    uri_query = uri.query
    uri_query = uri_query.sub("+"," ")

    # Unescape the URI
    uri_query = URI.unescape(uri_query)

    uri_query = uri_query.sub("="," like '%")
    uri_query = uri_query + "%'"

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} where #{uri_query} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    i = 0
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./edit.php' method='post'>\n<input type='hidden' name='filename' value='#{ENV["HTTP_REFERER"]}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='colNames' value='"+colNames+"' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='hidden' name='datadata' value='" + temp[temp.index("\t")..temp.length] + "' />\n<input type='submit' value='Edit' />\n</form>\n</td></tr>\n</table>\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }

    if i == 0
      puts "No record found"
    end

    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 690
  def _reduce_30( val, _values)
    # Select Query

    # Get the parameters from the GET query
    this_uri = ENV["REQUEST_URI"]
    require "uri"
    uri = URI.parse(this_uri)
    uri_query = uri.query
    uri_query = uri_query.sub("+"," ")

    # Unescape the URI
    uri_query = URI.unescape(uri_query)

    uri_query = uri_query.sub("="," like '%")
    uri_query = uri_query + "%'"

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} where #{uri_query} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    i = 0
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./delete.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='submit' value='Delete' /></form>\n</td></tr>\n</table>\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }

    if i == 0
      puts "No record found"
    end

    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 778
  def _reduce_31( val, _values)
    # Select Query

    # Get the parameters from the GET query
    this_uri = ENV["REQUEST_URI"]
    require "uri"
    uri = URI.parse(this_uri)
    uri_query = uri.query
    uri_query = uri_query.gsub("+"," ")

    # Unescape the URI
    uri_query = URI.unescape(uri_query)

    uri_query = uri_query.sub("="," like '%")
    uri_query = uri_query + "%'"

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      select #{val[2]} from #{val[4]} where #{uri_query} order by ID desc;
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Get the file name
    file_name = ARGV[0]
    slash_index = file_name.rindex("/")
    if slash_index == nil
      slash_index = -1
    end
    slash_index = slash_index + 1
    file_name = file_name[slash_index..file_name.length]
    
    # Execute MySQL Commands
    dave = []
    i = 0
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write
      colNames = ""

      # Save the column titles
      temp = f.gets
      colNames = temp

      while temp = f.gets
        if i > -1
          temp_comma = temp.gsub("\t",", ")
          space_comma = temp_comma.index(","); space_comma = space_comma + 1
          dave[i] = temp_comma[space_comma..temp_comma.length] + "<table>\n<tr><td>\n<form action='./edit.php' method='post'>\n<input type='hidden' name='filename' value='#{ENV["HTTP_REFERER"]}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='colNames' value='"+colNames+"' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='hidden' name='datadata' value='" + temp[temp.index("\t")..temp.length] + "' />\n<input type='submit' value='Edit' />\n</form>\n</td><td>\n<form action='./delete.php' method='post'>\n<input type='hidden' name='filename' value='#{file_name}' />\n<input type='hidden' name='table' value='#{val[4]}' />\n<input type='hidden' name='iddata' value='" + temp[0..temp.index("\t")] + "' />\n<input type='submit' value='Delete' /></form>\n</td></tr>\n</table>\n"
       else
          dave[i] = "<h3></h3>"

       end
       i += 1
      end
    }

    if i == 0
      puts "No record found"
    end

    dave.each {
      |d|
      puts d
    }
    return nil
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 805
  def _reduce_32( val, _values)
    # Insert statement

    # MySQL Commands:
    stream = <<-end
      use #{@db};
      insert into #{val[1]} #{val[2]};
      grant all on website_db.* to #{`id -un`.strip}@localhost;
    end

    # Execute MySQL Commands
    dave = []
    IO.popen("mysql -u #{@mysql_username} -p#{@mysql_password}", "r+") {|f|
      f.puts stream
      f.close_write;
      i = 0
      while temp = f.gets
        dave[i] = temp + "<br />"
        i += 1
      end
    }
    dave.each {
      |d|
      puts d
    }
  end
.,.,

 # reduce 33 omitted

module_eval <<'.,.,', 'ROR.racc', 813
  def _reduce_34( val, _values)
    return "(#{val[0]}) values (5, 4)"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 815
  def _reduce_35( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 816
  def _reduce_36( val, _values)
 return "#{val[0]} , "
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 817
  def _reduce_37( val, _values)
 return "#{val[0]} , #{val[2]}"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 820
  def _reduce_38( val, _values)
return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 821
  def _reduce_39( val, _values)
 return "#{val[0]}, #{val[2]}"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 825
  def _reduce_40( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 826
  def _reduce_41( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 840
  def _reduce_42( val, _values)
    if val[0] == nil
      return val[1].to_s + " " + val[3] + val[0].to_s
    else
      # More than one argument, a "," is required
      return val[1].to_s + " " + val[3] + "," + val[0].to_s
    end
  end
.,.,

 # reduce 43 omitted

module_eval <<'.,.,', 'ROR.racc', 843
  def _reduce_44( val, _values)
 return "int"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 844
  def _reduce_45( val, _values)
 return "varchar(#{val[2].to_i})"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 847
  def _reduce_46( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 848
  def _reduce_47( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 849
  def _reduce_48( val, _values)
 return val[0]
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 852
  def _reduce_49( val, _values)
 return "="
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 853
  def _reduce_50( val, _values)
 return "="
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 854
  def _reduce_51( val, _values)
 return ">"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 855
  def _reduce_52( val, _values)
 return ">"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 856
  def _reduce_53( val, _values)
 return "<"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 857
  def _reduce_54( val, _values)
 return "<"
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 858
  def _reduce_55( val, _values)
 return "like"
  end
.,.,

 # reduce 56 omitted

 # reduce 57 omitted

module_eval <<'.,.,', 'ROR.racc', 865
  def _reduce_58( val, _values)
 return val[1]
  end
.,.,

 # reduce 59 omitted

module_eval <<'.,.,', 'ROR.racc', 874
  def _reduce_60( val, _values)
      # Print a variable
      usrvar = @inthash[val[1]]
      return val[0].to_s + usrvar.to_s
  end
.,.,

module_eval <<'.,.,', 'ROR.racc', 879
  def _reduce_61( val, _values)
      # remove first & last chars... they are " and "
      return val[0].to_s + val[1][1..val[1].size].chop
  end
.,.,

 def _reduce_none( val, _values)
  val[0]
 end

end   # class ROTR


  rotr = ROTR.new


  # Open MySQL config file for reading
  # aFile = File.new("/home/adam/Desktop/ROR\ 0.03/MySQL\ config.txt", "r")

  # TODO: this code will process the file, not just print it
  # Output each line of the file
  #aFile.each_line do |line|
  #  puts line
  #end

  # Open source file for reading
  bFile = File.new(ARGV[0], "r")

  # Copy contents of input file into a string
  str = ""
  bFile.each_line do |line|
    str += line
  end

  # Parse
  begin
    rotr.scan_str(str)
  rescue ParseError
    puts 'parse error'
  end

